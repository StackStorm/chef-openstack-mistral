#!/bin/sh

# Startup script for mistral

# chkconfig: 35 85 15
# description: Openstack Mistral Workflow Service
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Mistral service"
NAME=<%= @service_name %>
HOME=<%= @home %>
DAEMON=$HOME/.venv/bin/python
DAEMON_ARGS="<%= @service_bin %> --config-file <%= @config_file %> --log-config <%= @log_config %> <%= @start_services %>"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/<%= @service_name %>
RUN_USER=<%= @run_user %>
RUN_GROUP=<%= @run_group %>
LOCKFILE=/var/lock/subsys/$NAME
PROCSTDOUT=/dev/null

# Source rhel helpers
. /etc/rc.d/init.d/functions

# Activate python virtual env
. $HOME/.venv/bin/activate

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

check_running(){
    local pid=$(cat $PIDFILE 2>/dev/null)
    if [ -f /proc/$pid/cmdline  ]; then
      ps -ewwo pid,command | sed -n "/^ *$pid/s/^ *$pid //p" | grep "$DAEMON $DAEMON_ARGS" | grep -vq grep
      [ $? -eq 0 ] && return 0
    fi
    return 1
}

background_run() {
    local check_delay=${1:-0}
    local pid=
    cd $HOME
    pid=$(runuser -g $RUN_GROUP $RUN_USER --session-command="$DAEMON $DAEMON_ARGS 1>$PROCSTDOUT 2>&1 & \
                                                             echo \$!")
    echo $pid > $PIDFILE
    sleep $check_delay
    check_running || return 2
}

do_start() {
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    local check_delay=2

    check_running && return 1
    background_run $check_delay || return 2
}

do_stop() {
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped

    killproc -p $PIDFILE
    KS=$?
    [ $KS -eq 0 ] && return 0
    [ $KS -eq 7 ] && return 1
    return 2
}

echo_exit() {
    [ $1 -eq 0 ] && echo_success || echo_failure
    echo
    exit $1
}


case "$1" in
  start)
  echo -n "Starting $NAME"
  do_start
  case "$?" in
    1) echo; status -p $PIDFILE $LOCKFILE; exit 0 ;;
    *) echo_exit $? ;;
  esac
  ;;
  stop)
  echo -n "Stopping $NAME"
  do_stop
  case "$?" in
    1) echo; status -p $PIDFILE $LOCKFILE; exit 0 ;;
    *) echo_exit $? ;;
  esac
  ;;
  status)
    status -p $PIDFILE $LOCKFILE
    exit $?
  ;;
  restart|force-reload)
  echo -n "Restarting $NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) echo_exit 0 ;;
      1) echo; status -p $PIDFILE $LOCKFILE; exit 0 ;; # Old process is still running
      *) echo_exit 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    echo_exit 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
